openapi: 3.0.4

info:
  title: Storey
  version: 1.0.0
  description: >
    Save your money by buying the most budget-friendly products between multiple
    options, and plan your shopping beforehand.

paths:
  /products:
    get:
      summary: Get a list of products.
      tags:
        - Product
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sortParam'
      responses:
        '200':
          description: Returns a list of products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListWithPageResponse'
    post:
      summary: Create a new product.
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductInput'
      responses:
        '201':
          description: Returns the newly created product.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/ResponseStatus'
                  data:
                    $ref: '#/components/schemas/Product'

  /products/{id}:
    parameters:
      - $ref: '#/components/parameters/idParam'

    get:
      summary: Get a product details.
      tags:
        - Product
      responses:
        '200':
          description: Returns a product details based on given product ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/ResponseStatus'
                  data:
                    $ref: '#/components/schemas/Product'
    put:
      summary: Edit a product details.
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditProductInput'
      responses:
        '200':
          description: Returns the edited product.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/ResponseStatus'
                  data:
                    $ref: '#/components/schemas/Product'
    delete:
      summary: Delete a product.
      tags:
        - Product
      responses:
        '200':
          description: Returns the deleted product.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/ResponseStatus'
                  data:
                    $ref: '#/components/schemas/Product'

  /products/{id}/price:
    put:
      summary: Change product price.
      tags:
        - Product
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
      responses:
        '200':
          description: Returns the product's new pricing information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/ResponseStatus'
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      price:
                        type: number
                      pricePerUnit:
                        type: number
                        format: float
                    example:
                      _id: 507f1f77bcf86cd799439011
                      price: 3000
                      netto: 80.00
                      unit: g
                      pricePerUnit: 37.50

components:
  schemas:
    ### ======================== Product ======================== ###

    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        categories:
          $ref: '#/components/schemas/Categories'
        price:
          type: number
        netto:
          type: number
          format: float
        unit:
          $ref: '#/components/schemas/Unit'
        pricePerUnit:
          type: number
          format: float
        store:
          $ref: '#/components/schemas/Store'
        pinned:
          type: boolean
          default: false
        author:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
      example:
        _id: 507f1f77bcf86cd799439011
        name: Indomie Goreng
        description: The best instant fried noodle in Indonesia.
        images:
          - fileName: 'path-to-image.png'
            path: 'https://photo.com/path-to-image.png'
        categories:
          - food
        price: 3000
        netto: 80.00
        unit: g
        pricePerUnit: 37.50
        store:
          name: Indomaret Nglegok
          address: Jl. Raya Penataran, Nglegok 1, Nglegok, Kec. Nglegok, Kabupaten Blitar, Jawa Timur
        pinned: true,
        author:
          username: 'JohnDoe'
        createdAt: 2025-09-12T03:57:00.600Z
    ProductInputBase:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        categories:
          $ref: '#/components/schemas/Categories'
        price:
          type: number
        netto:
          type: number
          format: float
        unit:
          $ref: '#/components/schemas/Unit'
        pricePerUnit:
          type: number
          format: float
        store:
          $ref: '#/components/schemas/Store'
    CreateProductInput:
      allOf:
        - $ref: '#/components/schemas/ProductInputBase'
        - required:
            - name
            - price
            - netto
            - unit
            - pricePerUnit
          example:
            name: Indomie Goreng
            description: The best instant fried noodle in Indonesia.
            images:
              - fileName: 'path-to-image.png'
                path: 'https://photo.com/path-to-image.png'
            categories:
              - food
            price: 3000
            netto: 80.00
            unit: g
            pricePerUnit: 37.50
            store:
              name: Indomaret Nglegok
              address: Jl. Raya Penataran, Nglegok 1, Nglegok, Kec. Nglegok, Kabupaten Blitar, Jawa Timur
    EditProductInput:
      allOf:
        - $ref: '#/components/schemas/ProductInputBase'
        - example:
            name: Indomie Goreng
            description: The best instant fried noodle in Indonesia.
            images:
              - fileName: 'path-to-image.png'
                path: 'https://photo.com/path-to-image.png'
            categories:
              - food
            price: 3000
            netto: 80.00
            unit: g
            pricePerUnit: 37.50
            store:
              name: Indomaret Nglegok
              address: Jl. Raya Penataran, Nglegok 1, Nglegok, Kec. Nglegok, Kabupaten Blitar, Jawa Timur
    ProductListWithPageResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            docs:
              type: array
              items:
                $ref: '#/components/schemas/Product'

    ### ======================== User ======================== ###

    User:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        email:
          type: string
          format: email
        username:
          type: string
        hash:
          type: string
          writeOnly: true
        salt:
          type: string
          writeOnly: true
        categories:
          $ref: '#/components/schemas/Categories'
        units:
          $ref: '#/components/schemas/Units'
        stores:
          $ref: '#/components/schemas/Stores'
      example:
        email: user@mail.com
        username: JohnDoe
        hash: hash_result
        salt: salt_result

    ### ======================== General ======================== ###

    Image:
      type: object
      properties:
        fileName:
          type: string
        path:
          type: string
      example:
        fileName: 'path-to-image.png'
        path: 'https://photo.com/path-to-image.png'
    Categories:
      type: array
      description: An array of product category tags.
      uniqueItems: true
      items:
        type: string
        description: A default product categories.
        enum:
          - food
          - beverage
          - vegetable
          - dairy
          - meat
          - fruit
    Units:
      type: array
      description: An array of product measuring units.
      minItems: 1
      uniqueItems: true
      items:
        $ref: '#/components/schemas/Unit'
    Unit:
      type: string
      description: The default list of measuring units.
      enum:
        - g
        - kg
        - ml
        - l
        - pcs
    Store:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
      example:
        name: Indomaret Nglegok
        address: Jl. Raya Penataran, Nglegok 1, Nglegok, Kec. Nglegok, Kabupaten Blitar, Jawa Timur
    Stores:
      type: array
      items:
        $ref: '#/components/schemas/Store'
    Page:
      type: integer
      minimum: 1
      default: 1
      example: 1
    Limit:
      type: integer
      enum:
        - 10
        - 25
        - 50
      default: 10
      example: 10
    PaginatedResponse:
      type: object
      properties:
        docs:
          type: array
        page:
          $ref: '#/components/schemas/Page'
        limit:
          $ref: '#/components/schemas/Limit'
        totalDocs:
          type: integer
          example: 120
    ResponseStatus:
      type: string
      enum:
        - ok
        - error
      default: ok

  parameters:
    pageParam:
      name: page
      in: query
      description: The current page for the requested data list.
      schema:
        $ref: '#/components/schemas/Page'
      required: true
    limitParam:
      name: limit
      in: query
      description: The amount of data per page.
      schema:
        $ref: '#/components/schemas/Limit'
    sortParam:
      name: sort
      in: query
      description: Sort key of an item list.
      schema:
        type: string
        enum:
          - createdAt
          - -createdAt
        default: -createdAt
    idParam:
      name: id
      in: path
      description: ID parameter for a specific data.
      schema:
        type: string
        example: 507f1f77bcf86cd799439011
      required: true
